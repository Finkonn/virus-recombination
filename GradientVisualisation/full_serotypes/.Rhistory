taxa_2117 <- get_taxa_name(t, 2117)
taxa_2117
taxa_2201 <- get_taxa_name(t, 2201)
taxa_2201
all_taxa <- c(taxa_2117, taxa_2201)
write.table(all_taxa, file="tree_order_2117_2201.csv", col.names=F, row.names=F)
info_upd = add_colors2meta("order_files.txt", "../metadata.csv")
info_upd = info_upd %>% arrange(GBAC)
write.csv(info_upd, "metadata_upd_full_test.csv",row.names=F)
t = ggtree(tree_rooted, size=0.1) %<+% info_upd +
geom_text2(aes(label = label,
subset = !is.na(as.numeric(label)) & as.numeric(label) >= 80),
size = 0.5, color = "black") +
geom_tiplab(size = 1, aes(color=label)) +
geom_cladelab(node = 1523, label = "O", align = T,
offset = 0.2, textcolor = 'red', barcolor = 'red') +
geom_cladelab(node = 1526, label = "A", align = T,
offset = 0.2, textcolor = 'blue', barcolor = 'blue') +
geom_cladelab(node = 1814, label = "C", align = T,
offset = 0.2, textcolor = 'green', barcolor = 'green') +
geom_cladelab(node = 1831, label = "Asia1", align = T,
offset = 0.2, textcolor = 'pink', barcolor = 'pink') +
geom_cladelab(node = 1956, label = "SAT2", align = T,
offset = 0.2, textcolor = 'cyan', barcolor = 'cyan') +
geom_cladelab(node = 2096, label = "SAT3", align = T,
offset = 0.2, textcolor = 'orange', barcolor = 'orange') +
geom_strip("OM562535/KEN/cow/2016/SAT1","MH053323/TCD/cattle/1972/SAT1",
label = "SAT1", align = T, offset = 0.2, color = 'purple', barcolor = 'purple', offset.text=.01) +
coord_cartesian(xlim = c(0, max(tree_rooted$edge.length) + 1)) +
scale_color_manual(values=info_upd$color) +
theme(legend.position = "none")
t
plot_tree = function(tree_file, meta){
tree =  read.tree(tree_file)
# root by midpoint
tree_rooted = midpoint.root(tree)
# read csv file with metadata
info = read.csv(meta)
t = ggtree(tree_rooted, size=0.1) %<+% info +
geom_text2(aes(label = label,
subset = !is.na(as.numeric(label)) & as.numeric(label) >= 80),
size = 1, color = "black") +
geom_tiplab(size = 2, aes(color=label)) +
scale_color_manual(values=info$color) +
theme(legend.position = "none") +
xlim_expand(2, panel = 'label')
return(t)
}
# Then you can get the list of trees in a specific directory (working directory in this example)
trees = list.files(path = ".", full.names = TRUE, pattern = ".treefile$")
meta_path = "metadata_upd_full.csv"
# Create visualization in a loop
for (file in trees){
# plot tree without legend, add title to plot
g = plot_tree(file,
meta_path)  +
ggtitle(strsplit(strsplit(file, '/')[[1]][2], '.treefile')[[1]][1])
# Construct full file paths
png_file <- paste0("Images/SerotypeGradientColoring/", basename(file), ".png")
svg_file <- paste0("Images/SerotypeGradientColoring/", basename(file), ".svg")
# Save figures
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
# Then you can get the list of trees in a specific directory (working directory in this example)
trees = list.files(path = ".", full.names = TRUE, pattern = ".treefile$")
meta_path = "metadata_upd_full_test.csv"
# Create visualization in a loop
for (file in trees){
# plot tree without legend, add title to plot
g = plot_tree(file,
meta_path)  +
ggtitle(strsplit(strsplit(file, '/')[[1]][2], '.treefile')[[1]][1])
# Construct full file paths
png_file <- paste0("Images/SerotypeGradientColoring/", basename(file), ".png")
svg_file <- paste0("Images/SerotypeGradientColoring/", basename(file), ".svg")
# Save figures
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
plot_tree = function(tree_file, meta){
tree =  read.tree(tree_file)
# root by midpoint
tree_rooted = midpoint.root(tree)
# read csv file with metadata
info = read.csv(meta)
t = ggtree(tree_rooted, size=0.1) %<+% info +
geom_text2(aes(label = label,
subset = !is.na(as.numeric(label)) & as.numeric(label) >= 80),
size = 1, color = "black") +
geom_tiplab(size = 1, aes(color=label)) +
scale_color_manual(values=info$color) +
theme(legend.position = "none") +
xlim_expand(2, panel = 'label')
return(t)
}
# Then you can get the list of trees in a specific directory (working directory in this example)
trees = list.files(path = ".", full.names = TRUE, pattern = ".treefile$")
meta_path = "metadata_upd_full_test.csv"
# Create visualization in a loop
for (file in trees){
# plot tree without legend, add title to plot
g = plot_tree(file,
meta_path)  +
ggtitle(strsplit(strsplit(file, '/')[[1]][2], '.treefile')[[1]][1])
# Construct full file paths
png_file <- paste0("Images/SerotypeGradientColoring/", basename(file), ".png")
svg_file <- paste0("Images/SerotypeGradientColoring/", basename(file), ".svg")
# Save figures
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
library('ggtree')
library(ggplot2)
library('phytools')
setwd("C:/Users/Mate_/Downloads/Diploma/virus-recombination/R_gradient_colors/full_serotypes")
#source("add_gradient_colors.R")
source("../modified_gradients.R")
tree = read.tree("VP1.treefile")
tree_rooted = midpoint.root(tree)
info = read.csv("../metadata.csv")
t = ggtree(tree_rooted, size=0.1) + geom_tiplab(size =0.2)
t
t = ggtree(tree_rooted, size=0.1) %<+% info + geom_tiplab(size = 2, aes(color=serotype)) +
geom_text(aes(label=node), hjust=-.3, size=0.2)
t
write.table(get_taxa_name(t, 1523),file="tree_order_1523.csv",col.names=F, row.names=F)
write.table(get_taxa_name(t, 1526),file="tree_order_1526.csv",col.names=F, row.names=F)
write.table(get_taxa_name(t, 1814),file="tree_order_1814.csv",col.names=F, row.names=F)
write.table(get_taxa_name(t, 1831),file="tree_order_1831.csv",col.names=F, row.names=F)
write.table(get_taxa_name(t, 1956),file="tree_order_1956.csv",col.names=F, row.names=F)
write.table(get_taxa_name(t, 2096),file="tree_order_2096.csv",col.names=F, row.names=F)
taxa_2117 <- get_taxa_name(t, 2117)
taxa_2117
taxa_2201 <- get_taxa_name(t, 2201)
taxa_2201
all_taxa <- c(taxa_2117, taxa_2201)
write.table(all_taxa, file="tree_order_2117_2201.csv", col.names=F, row.names=F)
info_upd = add_colors2meta("order_files.txt", "../metadata.csv")
# Create visualization in a loop
for (file in trees){
# plot tree without legend, add title to plot
g = plot_tree(file,
meta_path)  +
ggtitle(strsplit(strsplit(file, '/')[[1]][2], '.treefile')[[1]][1])
# Construct full file paths
png_file <- paste0("Images/SerotypeGradientColoring/", basename(file), ".png")
svg_file <- paste0("Images/SerotypeGradientColoring/", basename(file), ".svg")
# Save figures
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
t = ggtree(tree_rooted, size=0.1) %<+% info_upd +
geom_text2(aes(label = label,
subset = !is.na(as.numeric(label)) & as.numeric(label) >= 80),
size = 0.5, color = "black") +
geom_tiplab(size = 1, aes(color=label)) +
geom_cladelab(node = 1523, label = "O", align = T,
offset = 0.2, textcolor = 'red', barcolor = 'red') +
geom_cladelab(node = 1526, label = "A", align = T,
offset = 0.2, textcolor = 'blue', barcolor = 'blue') +
geom_cladelab(node = 1814, label = "C", align = T,
offset = 0.2, textcolor = 'green', barcolor = 'green') +
geom_cladelab(node = 1831, label = "Asia1", align = T,
offset = 0.2, textcolor = 'pink', barcolor = 'pink') +
geom_cladelab(node = 1956, label = "SAT2", align = T,
offset = 0.2, textcolor = 'cyan', barcolor = 'cyan') +
geom_cladelab(node = 2096, label = "SAT3", align = T,
offset = 0.2, textcolor = 'orange', barcolor = 'orange') +
geom_strip("OM562535/KEN/cow/2016/SAT1","MH053323/TCD/cattle/1972/SAT1",
label = "SAT1", align = T, offset = 0.2, color = 'purple', barcolor = 'purple', offset.text=.01) +
coord_cartesian(xlim = c(0, max(tree_rooted$edge.length) + 1)) +
scale_color_manual(values=info_upd$color) +
theme(legend.position = "none")
t
library('ggtree')
library(ggplot2)
library('phytools')
setwd("C:/Users/Mate_/Downloads/Diploma/virus-recombination/R_gradient_colors/full_serotypes")
#source("add_gradient_colors.R")
source("../modified_gradients.R")
tree = read.tree("VP1.treefile")
tree_rooted = midpoint.root(tree)
info = read.csv("../metadata.csv")
t = ggtree(tree_rooted, size=0.1) + geom_tiplab(size =0.2)
t
t = ggtree(tree_rooted, size=0.1) %<+% info + geom_tiplab(size = 2, aes(color=serotype)) +
geom_text(aes(label=node), hjust=-.3, size=0.2)
t
write.table(get_taxa_name(t, 1523),file="tree_order_1523.csv",col.names=F, row.names=F)
write.table(get_taxa_name(t, 1526),file="tree_order_1526.csv",col.names=F, row.names=F)
write.table(get_taxa_name(t, 1814),file="tree_order_1814.csv",col.names=F, row.names=F)
write.table(get_taxa_name(t, 1831),file="tree_order_1831.csv",col.names=F, row.names=F)
write.table(get_taxa_name(t, 1956),file="tree_order_1956.csv",col.names=F, row.names=F)
write.table(get_taxa_name(t, 2096),file="tree_order_2096.csv",col.names=F, row.names=F)
taxa_2117 <- get_taxa_name(t, 2117)
taxa_2117
taxa_2201 <- get_taxa_name(t, 2201)
taxa_2201
all_taxa <- c(taxa_2117, taxa_2201)
write.table(all_taxa, file="tree_order_2117_2201.csv", col.names=F, row.names=F)
info_upd = add_colors2meta("order_files.txt", "../metadata.csv")
info_upd = info_upd %>% arrange(GBAC)
t = ggtree(tree_rooted, size=0.1) %<+% info_upd +
geom_text2(aes(label = label,
subset = !is.na(as.numeric(label)) & as.numeric(label) >= 80),
size = 0.5, color = "black") +
geom_tiplab(size = 1, aes(color=label)) +
geom_cladelab(node = 1523, label = "O", align = T,
offset = 0.2, textcolor = 'red', barcolor = 'red') +
geom_cladelab(node = 1526, label = "A", align = T,
offset = 0.2, textcolor = 'blue', barcolor = 'blue') +
geom_cladelab(node = 1814, label = "C", align = T,
offset = 0.2, textcolor = 'green', barcolor = 'green') +
geom_cladelab(node = 1831, label = "Asia1", align = T,
offset = 0.2, textcolor = 'pink', barcolor = 'pink') +
geom_cladelab(node = 1956, label = "SAT2", align = T,
offset = 0.2, textcolor = 'cyan', barcolor = 'cyan') +
geom_cladelab(node = 2096, label = "SAT3", align = T,
offset = 0.2, textcolor = 'orange', barcolor = 'orange') +
geom_strip("OM562535/KEN/cow/2016/SAT1","MH053323/TCD/cattle/1972/SAT1",
label = "SAT1", align = T, offset = 0.2, color = 'purple', barcolor = 'purple', offset.text=.01) +
coord_cartesian(xlim = c(0, max(tree_rooted$edge.length) + 1)) +
scale_color_manual(values=info_upd$color) +
theme(legend.position = "none")
t
plot_tree = function(tree_file, meta){
tree =  read.tree(tree_file)
# root by midpoint
tree_rooted = midpoint.root(tree)
# read csv file with metadata
info = read.csv(meta)
t = ggtree(tree_rooted, size=0.1) %<+% info +
geom_text2(aes(label = label,
subset = !is.na(as.numeric(label)) & as.numeric(label) >= 80),
size = 1, color = "black") +
geom_tiplab(size = 1, aes(color=label)) +
scale_color_manual(values=info$color) +
theme(legend.position = "none") +
xlim_expand(2, panel = 'label')
return(t)
}
# Then you can get the list of trees in a specific directory (working directory in this example)
trees = list.files(path = ".", full.names = TRUE, pattern = ".treefile$")
meta_path = "metadata_upd_full.csv"
# Create visualization in a loop
for (file in trees){
# plot tree without legend, add title to plot
g = plot_tree(file,
meta_path)  +
ggtitle(strsplit(strsplit(file, '/')[[1]][2], '.treefile')[[1]][1])
# Construct full file paths
png_file <- paste0("Images/SerotypeGradientColoring/", basename(file), ".png")
svg_file <- paste0("Images/SerotypeGradientColoring/", basename(file), ".svg")
# Save figures
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
library('ggtree')
library('ggplot2')
library('phytools')
library('dplyr')
setwd("C:/Users/Mate_/Downloads/Diploma/virus-recombination/R_gradient_colors/full_serotypes")
source("../modified_gradients.R")
tree = read.tree("VP1.treefile")
tree_rooted = midpoint.root(tree)
info = read.csv("../metadata.csv")
unique_serotypes <- unique(info$serotype)
serotype_colors <- setNames(c("red", "blue", "green", "purple", "orange", "cyan", "pink"),
unique_serotypes)
plot_tree_with_heatmap = function(tree_file, meta, serotype_colors){
tree =  read.tree(tree_file)
tree_rooted = midpoint.root(tree)
info = read.csv(meta)
serotypes = data.frame("serotypes" = info[,c("serotype")])
rownames(serotypes) <- info$GBAC
t = ggtree(tree_rooted, size=0.1) %<+% info +
geom_tiplab(size = 0.5, aes(color=serotype)) +
scale_color_manual(values=serotype_colors, guide="none") +
theme(legend.position = "right")
t = gheatmap(t, serotypes,
offset = 0.5,
width = 0.05,
colnames_position = "top",
colnames_angle = 0,
colnames_offset_y = 20,
color = NULL) +
scale_fill_manual(values=serotype_colors, name = "Serotype")
return(t)
}
trees = list.files(path = ".", full.names = TRUE, pattern = ".treefile$")
meta_path = "../metadata.csv"
for (file in trees){
g = plot_tree_with_heatmap(file, meta_path, serotype_colors) +
ggtitle(strsplit(basename(file), '.treefile')[[1]][1])
png_file <- paste0("Images/SerotypeHeatBar/", basename(file), "_heatmap.png")
svg_file <- paste0("Images/SerotypeHeatBar/", basename(file), "_heatmap.svg")
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
library('ggtree')
library('ggplot2')
library('phytools')
library('dplyr')
setwd("C:/Users/Mate_/Downloads/Diploma/virus-recombination/R_gradient_colors/full_serotypes")
source("../modified_gradients.R")
tree = read.tree("VP1.treefile")
tree_rooted = midpoint.root(tree)
info = read.csv("../metadata.csv")
unique_serotypes <- unique(info$serotype)
serotype_colors <- setNames(c("red", "blue", "green", "purple", "orange", "cyan", "pink"),
unique_serotypes)
plot_tree_with_heatmap = function(tree_file, meta, serotype_colors){
tree =  read.tree(tree_file)
tree_rooted = midpoint.root(tree)
info = read.csv(meta)
serotypes = data.frame("serotypes" = info[,c("serotype")])
rownames(serotypes) <- info$GBAC
t = ggtree(tree_rooted, size=0.1) %<+% info +
geom_tiplab(size = 0.5, aes(color=serotype)) +
scale_color_manual(values=serotype_colors, guide="none") +
theme(legend.position = "right")
t = gheatmap(t, serotypes,
offset = 0.2,
width = 0.1,
colnames_position = "top",
colnames_angle = 0,
colnames_offset_y = 20,
color = NULL) +
scale_fill_manual(values=serotype_colors, name = "Serotype")
return(t)
}
trees = list.files(path = ".", full.names = TRUE, pattern = ".treefile$")
meta_path = "../metadata.csv"
for (file in trees){
g = plot_tree_with_heatmap(file, meta_path, serotype_colors) +
ggtitle(strsplit(basename(file), '.treefile')[[1]][1])
png_file <- paste0("Images/SerotypeHeatBar/", basename(file), "_heatmap.png")
svg_file <- paste0("Images/SerotypeHeatBar/", basename(file), "_heatmap.svg")
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
View(info)
View(info_upd)
library('ggtree')
library('ggplot2')
library('phytools')
library('dplyr')
setwd("C:/Users/Mate_/Downloads/Diploma/virus-recombination/R_gradient_colors/full_serotypes")
source("../modified_gradients.R")
# Список файлов с деревьями
trees = list.files(path = ".", full.names = TRUE, pattern = ".treefile$")
meta_path = "metadata_upd_full.csv"
# Цвета для серотипов
info = read.csv(meta_path)
unique_serotypes <- unique(info$serotype)
serotype_colors <- setNames(c("#B7B718", "#BEBADC", "#5A8EAF", "#B97908", "#4DA194", "#88B022", "#F38B78"),
unique_serotypes)
# Функция для построения дерева с градиентами и heatbar
plot_tree_with_gradient_and_heatmap = function(tree_file, meta, serotype_colors) {
# Загрузка и корневание дерева
tree = read.tree(tree_file)
tree_rooted = midpoint.root(tree)
# Загрузка метаданных
info = read.csv(meta)
# Подготовка данных для heatbar
serotypes = data.frame("serotypes" = info$serotype)
rownames(serotypes) <- info$GBAC
# Построение дерева с градиентной окраской
t = ggtree(tree_rooted, size=0.1) %<+% info +
geom_text2(aes(label = label,
subset = !is.na(as.numeric(label)) & as.numeric(label) >= 80),
size = 1, color = "black") +
geom_tiplab(size = 2, aes(color=label)) +
scale_color_manual(values=info$color, guide='none') +
theme(legend.position = "none") +
xlim_expand(1, panel = 'label')
# Добавление heatbar
t_with_heatmap = gheatmap(t, serotypes,
offset = 0.7,
width = 0.05,
colnames_position = "top",
colnames_angle = 0,
colnames_offset_y = 20,
color = NULL) +
scale_fill_manual(values=serotype_colors, name = "Serotype")
return(t_with_heatmap)
}
# Построение и сохранение деревьев
for (file in trees) {
# Построение дерева с градиентами и heatbar
g = plot_tree_with_gradient_and_heatmap(file, meta_path, serotype_colors) +
ggtitle(strsplit(basename(file), '.treefile')[[1]][1])
# Сохранение результатов
png_file <- paste0("Test/", basename(file), "_combined.png")
svg_file <- paste0("Test/", basename(file), "_combined.svg")
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
unique_serotypes <- unique(info$serotype)
# Цвета для серотипов
info = read.csv(meta_path)
unique_serotypes <- unique(info$serotype)
serotype_colors <- setNames(c("#B7B718", "#B67603", "#5F93B3", "#BDB9DB", "#D54514", "#3F9588", "#9FC845"),
unique_serotypes)
# Функция для построения дерева с градиентами и heatbar
plot_tree_with_gradient_and_heatmap = function(tree_file, meta, serotype_colors) {
# Загрузка и корневание дерева
tree = read.tree(tree_file)
tree_rooted = midpoint.root(tree)
# Загрузка метаданных
info = read.csv(meta)
# Подготовка данных для heatbar
serotypes = data.frame("serotypes" = info$serotype)
rownames(serotypes) <- info$GBAC
# Построение дерева с градиентной окраской
t = ggtree(tree_rooted, size=0.1) %<+% info +
geom_text2(aes(label = label,
subset = !is.na(as.numeric(label)) & as.numeric(label) >= 80),
size = 1, color = "black") +
geom_tiplab(size = 2, aes(color=label)) +
scale_color_manual(values=info$color, guide='none') +
theme(legend.position = "none") +
xlim_expand(1, panel = 'label')
# Добавление heatbar
t_with_heatmap = gheatmap(t, serotypes,
offset = 0.7,
width = 0.05,
colnames_position = "top",
colnames_angle = 0,
colnames_offset_y = 20,
color = NULL) +
scale_fill_manual(values=serotype_colors, name = "Serotype")
return(t_with_heatmap)
}
# Построение и сохранение деревьев
for (file in trees) {
# Построение дерева с градиентами и heatbar
g = plot_tree_with_gradient_and_heatmap(file, meta_path, serotype_colors) +
ggtitle(strsplit(basename(file), '.treefile')[[1]][1])
# Сохранение результатов
png_file <- paste0("Test/", basename(file), "_combined.png")
svg_file <- paste0("Test/", basename(file), "_combined.svg")
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
# Построение и сохранение деревьев
for (file in trees) {
# Построение дерева с градиентами и heatbar
g = plot_tree_with_gradient_and_heatmap(file, meta_path, serotype_colors) +
ggtitle(strsplit(basename(file), '.treefile')[[1]][1])
# Сохранение результатов
png_file <- paste0("Images/HeatBarAndGradient/", basename(file), "_combined.png")
svg_file <- paste0("Images/HeatBarAndGradient/", basename(file), "_combined.svg")
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
library('ggtree')
library('ggplot2')
library('phytools')
library('dplyr')
setwd("C:/Users/Mate_/Downloads/Diploma/virus-recombination/R_gradient_colors/full_serotypes")
source("../modified_gradients.R")
# Список файлов с деревьями
trees = list.files(path = ".", full.names = TRUE, pattern = ".treefile$")
meta_path = "metadata_upd_full.csv"
# Цвета для серотипов
info = read.csv(meta_path)
unique_serotypes <- unique(info$serotype)
serotype_colors <- setNames(c("#B7B718", "#B67603", "#5F93B3", "#BDB9DB", "#D54514", "#3F9588", "#9FC845"),
unique_serotypes)
# Функция для построения дерева с градиентами и heatbar
plot_tree_with_gradient_and_heatmap = function(tree_file, meta, serotype_colors) {
# Загрузка и корневание дерева
tree = read.tree(tree_file)
tree_rooted = midpoint.root(tree)
# Загрузка метаданных
info = read.csv(meta)
# Подготовка данных для heatbar
serotypes = data.frame("serotypes" = info$serotype)
rownames(serotypes) <- info$GBAC
# Построение дерева с градиентной окраской
t = ggtree(tree_rooted, size=0.1) %<+% info +
geom_text2(aes(label = label,
subset = !is.na(as.numeric(label)) & as.numeric(label) >= 80),
size = 1, color = "black") +
geom_tiplab(size = 2, aes(color=label)) +
scale_color_manual(values=info$color, guide='none') +
theme(legend.position = "none") +
xlim_expand(1, panel = 'label')
# Добавление heatbar
t_with_heatmap = gheatmap(t, serotypes,
offset = 0.7,
width = 0.1,
colnames_position = "top",
colnames_angle = 0,
colnames_offset_y = 20,
color = NULL) +
scale_fill_manual(values=serotype_colors, name = "Serotype")
return(t_with_heatmap)
}
# Построение и сохранение деревьев
for (file in trees) {
# Построение дерева с градиентами и heatbar
g = plot_tree_with_gradient_and_heatmap(file, meta_path, serotype_colors) +
ggtitle(strsplit(basename(file), '.treefile')[[1]][1])
# Сохранение результатов
png_file <- paste0("Images/HeatbarAndGradient/", basename(file), "_combined.png")
svg_file <- paste0("Images/HeatbarAndGradient/", basename(file), "_combined.svg")
ggsave(png_file, g, height = 10, width = 7, dpi = 600)
ggsave(svg_file, g, height = 10, width = 7, dpi = 300)
}
